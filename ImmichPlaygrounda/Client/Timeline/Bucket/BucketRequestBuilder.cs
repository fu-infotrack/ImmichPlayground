// <auto-generated/>
#pragma warning disable CS0618
using Immich.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Immich.Client.Timeline.Bucket
{
    /// <summary>
    /// Builds and executes requests for operations under \timeline\bucket
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BucketRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Timeline.Bucket.BucketRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BucketRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/timeline/bucket?timeBucket={timeBucket}{&albumId*,isFavorite*,isTrashed*,key*,order*,personId*,slug*,tagId*,userId*,visibility*,withCoordinates*,withPartners*,withStacked*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Timeline.Bucket.BucketRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BucketRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/timeline/bucket?timeBucket={timeBucket}{&albumId*,isFavorite*,isTrashed*,key*,order*,personId*,slug*,tagId*,userId*,visibility*,withCoordinates*,withPartners*,withStacked*}", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint requires the `asset.read` permission.
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.TimeBucketAssetResponseDto"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Immich.Client.Models.TimeBucketAssetResponseDto?> GetAsync(Action<RequestConfiguration<global::Immich.Client.Timeline.Bucket.BucketRequestBuilder.BucketRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Immich.Client.Models.TimeBucketAssetResponseDto> GetAsync(Action<RequestConfiguration<global::Immich.Client.Timeline.Bucket.BucketRequestBuilder.BucketRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Immich.Client.Models.TimeBucketAssetResponseDto>(requestInfo, global::Immich.Client.Models.TimeBucketAssetResponseDto.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint requires the `asset.read` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Immich.Client.Timeline.Bucket.BucketRequestBuilder.BucketRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Immich.Client.Timeline.Bucket.BucketRequestBuilder.BucketRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Timeline.Bucket.BucketRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Immich.Client.Timeline.Bucket.BucketRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Immich.Client.Timeline.Bucket.BucketRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// This endpoint requires the `asset.read` permission.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BucketRequestBuilderGetQueryParameters 
        {
            /// <summary>Filter assets belonging to a specific album</summary>
            [QueryParameter("albumId")]
            public Guid? AlbumId { get; set; }
            /// <summary>Filter by favorite status (true for favorites only, false for non-favorites only)</summary>
            [QueryParameter("isFavorite")]
            public bool? IsFavorite { get; set; }
            /// <summary>Filter by trash status (true for trashed assets only, false for non-trashed only)</summary>
            [QueryParameter("isTrashed")]
            public bool? IsTrashed { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("key")]
            public string? Key { get; set; }
#nullable restore
#else
            [QueryParameter("key")]
            public string Key { get; set; }
#endif
            /// <summary>Sort order for assets within time buckets (ASC for oldest first, DESC for newest first)</summary>
            [Obsolete("This property is deprecated, use OrderAsAssetOrder instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("order")]
            public string? Order { get; set; }
#nullable restore
#else
            [QueryParameter("order")]
            public string Order { get; set; }
#endif
            /// <summary>Sort order for assets within time buckets (ASC for oldest first, DESC for newest first)</summary>
            [QueryParameter("order")]
            public global::Immich.Client.Models.AssetOrder? OrderAsAssetOrder { get; set; }
            /// <summary>Filter assets containing a specific person (face recognition)</summary>
            [QueryParameter("personId")]
            public Guid? PersonId { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("slug")]
            public string? Slug { get; set; }
#nullable restore
#else
            [QueryParameter("slug")]
            public string Slug { get; set; }
#endif
            /// <summary>Filter assets with a specific tag</summary>
            [QueryParameter("tagId")]
            public Guid? TagId { get; set; }
            /// <summary>Time bucket identifier in YYYY-MM-DD format (e.g., &quot;2024-01-01&quot; for January 2024)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("timeBucket")]
            public string? TimeBucket { get; set; }
#nullable restore
#else
            [QueryParameter("timeBucket")]
            public string TimeBucket { get; set; }
#endif
            /// <summary>Filter assets by specific user ID</summary>
            [QueryParameter("userId")]
            public Guid? UserId { get; set; }
            /// <summary>Filter by asset visibility status (ARCHIVE, TIMELINE, HIDDEN, LOCKED)</summary>
            [Obsolete("This property is deprecated, use VisibilityAsAssetVisibility instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("visibility")]
            public string? Visibility { get; set; }
#nullable restore
#else
            [QueryParameter("visibility")]
            public string Visibility { get; set; }
#endif
            /// <summary>Filter by asset visibility status (ARCHIVE, TIMELINE, HIDDEN, LOCKED)</summary>
            [QueryParameter("visibility")]
            public global::Immich.Client.Models.AssetVisibility? VisibilityAsAssetVisibility { get; set; }
            /// <summary>Include location data in the response</summary>
            [QueryParameter("withCoordinates")]
            public bool? WithCoordinates { get; set; }
            /// <summary>Include assets shared by partners</summary>
            [QueryParameter("withPartners")]
            public bool? WithPartners { get; set; }
            /// <summary>Include stacked assets in the response. When true, only primary assets from stacks are returned.</summary>
            [QueryParameter("withStacked")]
            public bool? WithStacked { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BucketRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Immich.Client.Timeline.Bucket.BucketRequestBuilder.BucketRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

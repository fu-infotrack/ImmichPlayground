// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ServerStorageResponseDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The diskAvailable property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DiskAvailable { get; set; }
#nullable restore
#else
        public string DiskAvailable { get; set; }
#endif
        /// <summary>The diskAvailableRaw property</summary>
        public long? DiskAvailableRaw { get; set; }
        /// <summary>The diskSize property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DiskSize { get; set; }
#nullable restore
#else
        public string DiskSize { get; set; }
#endif
        /// <summary>The diskSizeRaw property</summary>
        public long? DiskSizeRaw { get; set; }
        /// <summary>The diskUsagePercentage property</summary>
        public double? DiskUsagePercentage { get; set; }
        /// <summary>The diskUse property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DiskUse { get; set; }
#nullable restore
#else
        public string DiskUse { get; set; }
#endif
        /// <summary>The diskUseRaw property</summary>
        public long? DiskUseRaw { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.ServerStorageResponseDto"/> and sets the default values.
        /// </summary>
        public ServerStorageResponseDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.ServerStorageResponseDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.ServerStorageResponseDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.ServerStorageResponseDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "diskAvailable", n => { DiskAvailable = n.GetStringValue(); } },
                { "diskAvailableRaw", n => { DiskAvailableRaw = n.GetLongValue(); } },
                { "diskSize", n => { DiskSize = n.GetStringValue(); } },
                { "diskSizeRaw", n => { DiskSizeRaw = n.GetLongValue(); } },
                { "diskUsagePercentage", n => { DiskUsagePercentage = n.GetDoubleValue(); } },
                { "diskUse", n => { DiskUse = n.GetStringValue(); } },
                { "diskUseRaw", n => { DiskUseRaw = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("diskAvailable", DiskAvailable);
            writer.WriteLongValue("diskAvailableRaw", DiskAvailableRaw);
            writer.WriteStringValue("diskSize", DiskSize);
            writer.WriteLongValue("diskSizeRaw", DiskSizeRaw);
            writer.WriteDoubleValue("diskUsagePercentage", DiskUsagePercentage);
            writer.WriteStringValue("diskUse", DiskUse);
            writer.WriteLongValue("diskUseRaw", DiskUseRaw);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

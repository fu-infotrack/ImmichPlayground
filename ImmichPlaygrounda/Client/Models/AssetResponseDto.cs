// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AssetResponseDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>base64 encoded sha1 hash</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Checksum { get; set; }
#nullable restore
#else
        public string Checksum { get; set; }
#endif
        /// <summary>The UTC timestamp when the asset was originally uploaded to Immich.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The deviceAssetId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceAssetId { get; set; }
#nullable restore
#else
        public string DeviceAssetId { get; set; }
#endif
        /// <summary>The deviceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceId { get; set; }
#nullable restore
#else
        public string DeviceId { get; set; }
#endif
        /// <summary>The duplicateId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DuplicateId { get; set; }
#nullable restore
#else
        public string DuplicateId { get; set; }
#endif
        /// <summary>The duration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Duration { get; set; }
#nullable restore
#else
        public string Duration { get; set; }
#endif
        /// <summary>The exifInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Immich.Client.Models.ExifResponseDto? ExifInfo { get; set; }
#nullable restore
#else
        public global::Immich.Client.Models.ExifResponseDto ExifInfo { get; set; }
#endif
        /// <summary>The actual UTC timestamp when the file was created/captured, preserving timezone information. This is the authoritative timestamp for chronological sorting within timeline groups. Combined with timezone data, this can be used to determine the exact moment the photo was taken.</summary>
        public DateTimeOffset? FileCreatedAt { get; set; }
        /// <summary>The UTC timestamp when the file was last modified on the filesystem. This reflects the last time the physical file was changed, which may be different from when the photo was originally taken.</summary>
        public DateTimeOffset? FileModifiedAt { get; set; }
        /// <summary>The hasMetadata property</summary>
        public bool? HasMetadata { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The isArchived property</summary>
        public bool? IsArchived { get; set; }
        /// <summary>The isFavorite property</summary>
        public bool? IsFavorite { get; set; }
        /// <summary>The isOffline property</summary>
        public bool? IsOffline { get; set; }
        /// <summary>The isTrashed property</summary>
        public bool? IsTrashed { get; set; }
        /// <summary>This property was deprecated in v1.106.0</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LibraryId { get; set; }
#nullable restore
#else
        public string LibraryId { get; set; }
#endif
        /// <summary>The livePhotoVideoId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LivePhotoVideoId { get; set; }
#nullable restore
#else
        public string LivePhotoVideoId { get; set; }
#endif
        /// <summary>The local date and time when the photo/video was taken, derived from EXIF metadata. This represents the photographer&apos;s local time regardless of timezone, stored as a timezone-agnostic timestamp. Used for timeline grouping by &quot;local&quot; days and months.</summary>
        public DateTimeOffset? LocalDateTime { get; set; }
        /// <summary>The originalFileName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalFileName { get; set; }
#nullable restore
#else
        public string OriginalFileName { get; set; }
#endif
        /// <summary>The originalMimeType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalMimeType { get; set; }
#nullable restore
#else
        public string OriginalMimeType { get; set; }
#endif
        /// <summary>The originalPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalPath { get; set; }
#nullable restore
#else
        public string OriginalPath { get; set; }
#endif
        /// <summary>The owner property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Immich.Client.Models.UserResponseDto? Owner { get; set; }
#nullable restore
#else
        public global::Immich.Client.Models.UserResponseDto Owner { get; set; }
#endif
        /// <summary>The ownerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerId { get; set; }
#nullable restore
#else
        public string OwnerId { get; set; }
#endif
        /// <summary>The people property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Immich.Client.Models.PersonWithFacesResponseDto>? People { get; set; }
#nullable restore
#else
        public List<global::Immich.Client.Models.PersonWithFacesResponseDto> People { get; set; }
#endif
        /// <summary>This property was deprecated in v1.113.0</summary>
        [Obsolete("")]
        public bool? Resized { get; set; }
        /// <summary>The stack property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Immich.Client.Models.AssetStackResponseDto? Stack { get; set; }
#nullable restore
#else
        public global::Immich.Client.Models.AssetStackResponseDto Stack { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Immich.Client.Models.TagResponseDto>? Tags { get; set; }
#nullable restore
#else
        public List<global::Immich.Client.Models.TagResponseDto> Tags { get; set; }
#endif
        /// <summary>The thumbhash property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Thumbhash { get; set; }
#nullable restore
#else
        public string Thumbhash { get; set; }
#endif
        /// <summary>The type property</summary>
        public global::Immich.Client.Models.AssetTypeEnum? Type { get; set; }
        /// <summary>The unassignedFaces property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Immich.Client.Models.AssetFaceWithoutPersonResponseDto>? UnassignedFaces { get; set; }
#nullable restore
#else
        public List<global::Immich.Client.Models.AssetFaceWithoutPersonResponseDto> UnassignedFaces { get; set; }
#endif
        /// <summary>The UTC timestamp when the asset record was last updated in the database. This is automatically maintained by the database and reflects when any field in the asset was last modified.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>The visibility property</summary>
        public global::Immich.Client.Models.AssetVisibility? Visibility { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.AssetResponseDto"/> and sets the default values.
        /// </summary>
        public AssetResponseDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.AssetResponseDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.AssetResponseDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.AssetResponseDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "checksum", n => { Checksum = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "deviceAssetId", n => { DeviceAssetId = n.GetStringValue(); } },
                { "deviceId", n => { DeviceId = n.GetStringValue(); } },
                { "duplicateId", n => { DuplicateId = n.GetStringValue(); } },
                { "duration", n => { Duration = n.GetStringValue(); } },
                { "exifInfo", n => { ExifInfo = n.GetObjectValue<global::Immich.Client.Models.ExifResponseDto>(global::Immich.Client.Models.ExifResponseDto.CreateFromDiscriminatorValue); } },
                { "fileCreatedAt", n => { FileCreatedAt = n.GetDateTimeOffsetValue(); } },
                { "fileModifiedAt", n => { FileModifiedAt = n.GetDateTimeOffsetValue(); } },
                { "hasMetadata", n => { HasMetadata = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isArchived", n => { IsArchived = n.GetBoolValue(); } },
                { "isFavorite", n => { IsFavorite = n.GetBoolValue(); } },
                { "isOffline", n => { IsOffline = n.GetBoolValue(); } },
                { "isTrashed", n => { IsTrashed = n.GetBoolValue(); } },
                { "libraryId", n => { LibraryId = n.GetStringValue(); } },
                { "livePhotoVideoId", n => { LivePhotoVideoId = n.GetStringValue(); } },
                { "localDateTime", n => { LocalDateTime = n.GetDateTimeOffsetValue(); } },
                { "originalFileName", n => { OriginalFileName = n.GetStringValue(); } },
                { "originalMimeType", n => { OriginalMimeType = n.GetStringValue(); } },
                { "originalPath", n => { OriginalPath = n.GetStringValue(); } },
                { "owner", n => { Owner = n.GetObjectValue<global::Immich.Client.Models.UserResponseDto>(global::Immich.Client.Models.UserResponseDto.CreateFromDiscriminatorValue); } },
                { "ownerId", n => { OwnerId = n.GetStringValue(); } },
                { "people", n => { People = n.GetCollectionOfObjectValues<global::Immich.Client.Models.PersonWithFacesResponseDto>(global::Immich.Client.Models.PersonWithFacesResponseDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "resized", n => { Resized = n.GetBoolValue(); } },
                { "stack", n => { Stack = n.GetObjectValue<global::Immich.Client.Models.AssetStackResponseDto>(global::Immich.Client.Models.AssetStackResponseDto.CreateFromDiscriminatorValue); } },
                { "tags", n => { Tags = n.GetCollectionOfObjectValues<global::Immich.Client.Models.TagResponseDto>(global::Immich.Client.Models.TagResponseDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "thumbhash", n => { Thumbhash = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Immich.Client.Models.AssetTypeEnum>(); } },
                { "unassignedFaces", n => { UnassignedFaces = n.GetCollectionOfObjectValues<global::Immich.Client.Models.AssetFaceWithoutPersonResponseDto>(global::Immich.Client.Models.AssetFaceWithoutPersonResponseDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "visibility", n => { Visibility = n.GetEnumValue<global::Immich.Client.Models.AssetVisibility>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("checksum", Checksum);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("deviceAssetId", DeviceAssetId);
            writer.WriteStringValue("deviceId", DeviceId);
            writer.WriteStringValue("duplicateId", DuplicateId);
            writer.WriteStringValue("duration", Duration);
            writer.WriteObjectValue<global::Immich.Client.Models.ExifResponseDto>("exifInfo", ExifInfo);
            writer.WriteDateTimeOffsetValue("fileCreatedAt", FileCreatedAt);
            writer.WriteDateTimeOffsetValue("fileModifiedAt", FileModifiedAt);
            writer.WriteBoolValue("hasMetadata", HasMetadata);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isArchived", IsArchived);
            writer.WriteBoolValue("isFavorite", IsFavorite);
            writer.WriteBoolValue("isOffline", IsOffline);
            writer.WriteBoolValue("isTrashed", IsTrashed);
            writer.WriteStringValue("libraryId", LibraryId);
            writer.WriteStringValue("livePhotoVideoId", LivePhotoVideoId);
            writer.WriteDateTimeOffsetValue("localDateTime", LocalDateTime);
            writer.WriteStringValue("originalFileName", OriginalFileName);
            writer.WriteStringValue("originalMimeType", OriginalMimeType);
            writer.WriteStringValue("originalPath", OriginalPath);
            writer.WriteObjectValue<global::Immich.Client.Models.UserResponseDto>("owner", Owner);
            writer.WriteStringValue("ownerId", OwnerId);
            writer.WriteCollectionOfObjectValues<global::Immich.Client.Models.PersonWithFacesResponseDto>("people", People);
            writer.WriteBoolValue("resized", Resized);
            writer.WriteObjectValue<global::Immich.Client.Models.AssetStackResponseDto>("stack", Stack);
            writer.WriteCollectionOfObjectValues<global::Immich.Client.Models.TagResponseDto>("tags", Tags);
            writer.WriteStringValue("thumbhash", Thumbhash);
            writer.WriteEnumValue<global::Immich.Client.Models.AssetTypeEnum>("type", Type);
            writer.WriteCollectionOfObjectValues<global::Immich.Client.Models.AssetFaceWithoutPersonResponseDto>("unassignedFaces", UnassignedFaces);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteEnumValue<global::Immich.Client.Models.AssetVisibility>("visibility", Visibility);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

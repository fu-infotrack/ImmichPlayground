// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TimeBucketAssetResponseDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Array of city names extracted from EXIF GPS data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? City { get; set; }
#nullable restore
#else
        public List<string> City { get; set; }
#endif
        /// <summary>Array of country names extracted from EXIF GPS data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Country { get; set; }
#nullable restore
#else
        public List<string> Country { get; set; }
#endif
        /// <summary>Array of video durations in HH:MM:SS format (null for images)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Duration { get; set; }
#nullable restore
#else
        public List<string> Duration { get; set; }
#endif
        /// <summary>Array of file creation timestamps in UTC (ISO 8601 format, without timezone)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FileCreatedAt { get; set; }
#nullable restore
#else
        public List<string> FileCreatedAt { get; set; }
#endif
        /// <summary>Array of asset IDs in the time bucket</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Id { get; set; }
#nullable restore
#else
        public List<string> Id { get; set; }
#endif
        /// <summary>Array indicating whether each asset is favorited</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<bool?>? IsFavorite { get; set; }
#nullable restore
#else
        public List<bool?> IsFavorite { get; set; }
#endif
        /// <summary>Array indicating whether each asset is an image (false for videos)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<bool?>? IsImage { get; set; }
#nullable restore
#else
        public List<bool?> IsImage { get; set; }
#endif
        /// <summary>Array indicating whether each asset is in the trash</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<bool?>? IsTrashed { get; set; }
#nullable restore
#else
        public List<bool?> IsTrashed { get; set; }
#endif
        /// <summary>Array of latitude coordinates extracted from EXIF GPS data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? Latitude { get; set; }
#nullable restore
#else
        public List<double?> Latitude { get; set; }
#endif
        /// <summary>Array of live photo video asset IDs (null for non-live photos)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? LivePhotoVideoId { get; set; }
#nullable restore
#else
        public List<string> LivePhotoVideoId { get; set; }
#endif
        /// <summary>Array of UTC offset hours at the time each photo was taken. Positive values are east of UTC, negative values are west of UTC. Values may be fractional (e.g., 5.5 for +05:30, -9.75 for -09:45). Applying this offset to &apos;fileCreatedAt&apos; will give you the time the photo was taken from the photographer&apos;s perspective.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? LocalOffsetHours { get; set; }
#nullable restore
#else
        public List<double?> LocalOffsetHours { get; set; }
#endif
        /// <summary>Array of longitude coordinates extracted from EXIF GPS data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? Longitude { get; set; }
#nullable restore
#else
        public List<double?> Longitude { get; set; }
#endif
        /// <summary>Array of owner IDs for each asset</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OwnerId { get; set; }
#nullable restore
#else
        public List<string> OwnerId { get; set; }
#endif
        /// <summary>Array of projection types for 360Â° content (e.g., &quot;EQUIRECTANGULAR&quot;, &quot;CUBEFACE&quot;, &quot;CYLINDRICAL&quot;)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ProjectionType { get; set; }
#nullable restore
#else
        public List<string> ProjectionType { get; set; }
#endif
        /// <summary>Array of aspect ratios (width/height) for each asset</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? Ratio { get; set; }
#nullable restore
#else
        public List<double?> Ratio { get; set; }
#endif
        /// <summary>Array of stack information as [stackId, assetCount] tuples (null for non-stacked assets)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Stack { get; set; }
#nullable restore
#else
        public UntypedNode Stack { get; set; }
#endif
        /// <summary>Array of BlurHash strings for generating asset previews (base64 encoded)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Thumbhash { get; set; }
#nullable restore
#else
        public List<string> Thumbhash { get; set; }
#endif
        /// <summary>Array of visibility statuses for each asset (e.g., ARCHIVE, TIMELINE, HIDDEN, LOCKED)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Immich.Client.Models.AssetVisibility?>? Visibility { get; set; }
#nullable restore
#else
        public List<global::Immich.Client.Models.AssetVisibility?> Visibility { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.TimeBucketAssetResponseDto"/> and sets the default values.
        /// </summary>
        public TimeBucketAssetResponseDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.TimeBucketAssetResponseDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.TimeBucketAssetResponseDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.TimeBucketAssetResponseDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "city", n => { City = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "country", n => { Country = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "duration", n => { Duration = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "fileCreatedAt", n => { FileCreatedAt = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "isFavorite", n => { IsFavorite = n.GetCollectionOfPrimitiveValues<bool?>()?.AsList(); } },
                { "isImage", n => { IsImage = n.GetCollectionOfPrimitiveValues<bool?>()?.AsList(); } },
                { "isTrashed", n => { IsTrashed = n.GetCollectionOfPrimitiveValues<bool?>()?.AsList(); } },
                { "latitude", n => { Latitude = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "livePhotoVideoId", n => { LivePhotoVideoId = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "localOffsetHours", n => { LocalOffsetHours = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "longitude", n => { Longitude = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "ownerId", n => { OwnerId = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "projectionType", n => { ProjectionType = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "ratio", n => { Ratio = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "stack", n => { Stack = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "thumbhash", n => { Thumbhash = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "visibility", n => { Visibility = n.GetCollectionOfEnumValues<global::Immich.Client.Models.AssetVisibility>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("city", City);
            writer.WriteCollectionOfPrimitiveValues<string>("country", Country);
            writer.WriteCollectionOfPrimitiveValues<string>("duration", Duration);
            writer.WriteCollectionOfPrimitiveValues<string>("fileCreatedAt", FileCreatedAt);
            writer.WriteCollectionOfPrimitiveValues<string>("id", Id);
            writer.WriteCollectionOfPrimitiveValues<bool?>("isFavorite", IsFavorite);
            writer.WriteCollectionOfPrimitiveValues<bool?>("isImage", IsImage);
            writer.WriteCollectionOfPrimitiveValues<bool?>("isTrashed", IsTrashed);
            writer.WriteCollectionOfPrimitiveValues<double?>("latitude", Latitude);
            writer.WriteCollectionOfPrimitiveValues<string>("livePhotoVideoId", LivePhotoVideoId);
            writer.WriteCollectionOfPrimitiveValues<double?>("localOffsetHours", LocalOffsetHours);
            writer.WriteCollectionOfPrimitiveValues<double?>("longitude", Longitude);
            writer.WriteCollectionOfPrimitiveValues<string>("ownerId", OwnerId);
            writer.WriteCollectionOfPrimitiveValues<string>("projectionType", ProjectionType);
            writer.WriteCollectionOfPrimitiveValues<double?>("ratio", Ratio);
            writer.WriteObjectValue<UntypedNode>("stack", Stack);
            writer.WriteCollectionOfPrimitiveValues<string>("thumbhash", Thumbhash);
            writer.WriteCollectionOfEnumValues<global::Immich.Client.Models.AssetVisibility>("visibility", Visibility);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

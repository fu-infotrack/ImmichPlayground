// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AssetBulkUpdateDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The dateTimeOriginal property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateTimeOriginal { get; set; }
#nullable restore
#else
        public string DateTimeOriginal { get; set; }
#endif
        /// <summary>The dateTimeRelative property</summary>
        public double? DateTimeRelative { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The duplicateId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DuplicateId { get; set; }
#nullable restore
#else
        public string DuplicateId { get; set; }
#endif
        /// <summary>The ids property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? Ids { get; set; }
#nullable restore
#else
        public List<Guid?> Ids { get; set; }
#endif
        /// <summary>The isFavorite property</summary>
        public bool? IsFavorite { get; set; }
        /// <summary>The latitude property</summary>
        public double? Latitude { get; set; }
        /// <summary>The longitude property</summary>
        public double? Longitude { get; set; }
        /// <summary>The rating property</summary>
        public double? Rating { get; set; }
        /// <summary>The timeZone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>The visibility property</summary>
        public global::Immich.Client.Models.AssetVisibility? Visibility { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.AssetBulkUpdateDto"/> and sets the default values.
        /// </summary>
        public AssetBulkUpdateDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.AssetBulkUpdateDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.AssetBulkUpdateDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.AssetBulkUpdateDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dateTimeOriginal", n => { DateTimeOriginal = n.GetStringValue(); } },
                { "dateTimeRelative", n => { DateTimeRelative = n.GetDoubleValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "duplicateId", n => { DuplicateId = n.GetStringValue(); } },
                { "ids", n => { Ids = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "isFavorite", n => { IsFavorite = n.GetBoolValue(); } },
                { "latitude", n => { Latitude = n.GetDoubleValue(); } },
                { "longitude", n => { Longitude = n.GetDoubleValue(); } },
                { "rating", n => { Rating = n.GetDoubleValue(); } },
                { "timeZone", n => { TimeZone = n.GetStringValue(); } },
                { "visibility", n => { Visibility = n.GetEnumValue<global::Immich.Client.Models.AssetVisibility>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("dateTimeOriginal", DateTimeOriginal);
            writer.WriteDoubleValue("dateTimeRelative", DateTimeRelative);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("duplicateId", DuplicateId);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("ids", Ids);
            writer.WriteBoolValue("isFavorite", IsFavorite);
            writer.WriteDoubleValue("latitude", Latitude);
            writer.WriteDoubleValue("longitude", Longitude);
            writer.WriteDoubleValue("rating", Rating);
            writer.WriteStringValue("timeZone", TimeZone);
            writer.WriteEnumValue<global::Immich.Client.Models.AssetVisibility>("visibility", Visibility);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

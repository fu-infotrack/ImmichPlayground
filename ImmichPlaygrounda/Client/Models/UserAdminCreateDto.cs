// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserAdminCreateDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The avatarColor property</summary>
        public global::Immich.Client.Models.UserAvatarColor? AvatarColor { get; set; }
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The isAdmin property</summary>
        public bool? IsAdmin { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The notify property</summary>
        public bool? Notify { get; set; }
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The quotaSizeInBytes property</summary>
        public long? QuotaSizeInBytes { get; set; }
        /// <summary>The shouldChangePassword property</summary>
        public bool? ShouldChangePassword { get; set; }
        /// <summary>The storageLabel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StorageLabel { get; set; }
#nullable restore
#else
        public string StorageLabel { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.UserAdminCreateDto"/> and sets the default values.
        /// </summary>
        public UserAdminCreateDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.UserAdminCreateDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.UserAdminCreateDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.UserAdminCreateDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "avatarColor", n => { AvatarColor = n.GetEnumValue<global::Immich.Client.Models.UserAvatarColor>(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "isAdmin", n => { IsAdmin = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "notify", n => { Notify = n.GetBoolValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "quotaSizeInBytes", n => { QuotaSizeInBytes = n.GetLongValue(); } },
                { "shouldChangePassword", n => { ShouldChangePassword = n.GetBoolValue(); } },
                { "storageLabel", n => { StorageLabel = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Immich.Client.Models.UserAvatarColor>("avatarColor", AvatarColor);
            writer.WriteStringValue("email", Email);
            writer.WriteBoolValue("isAdmin", IsAdmin);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("notify", Notify);
            writer.WriteStringValue("password", Password);
            writer.WriteLongValue("quotaSizeInBytes", QuotaSizeInBytes);
            writer.WriteBoolValue("shouldChangePassword", ShouldChangePassword);
            writer.WriteStringValue("storageLabel", StorageLabel);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

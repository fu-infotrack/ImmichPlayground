// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SmartSearchDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The albumIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? AlbumIds { get; set; }
#nullable restore
#else
        public List<Guid?> AlbumIds { get; set; }
#endif
        /// <summary>The city property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>The country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The createdAfter property</summary>
        public DateTimeOffset? CreatedAfter { get; set; }
        /// <summary>The createdBefore property</summary>
        public DateTimeOffset? CreatedBefore { get; set; }
        /// <summary>The deviceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceId { get; set; }
#nullable restore
#else
        public string DeviceId { get; set; }
#endif
        /// <summary>The isEncoded property</summary>
        public bool? IsEncoded { get; set; }
        /// <summary>The isFavorite property</summary>
        public bool? IsFavorite { get; set; }
        /// <summary>The isMotion property</summary>
        public bool? IsMotion { get; set; }
        /// <summary>The isNotInAlbum property</summary>
        public bool? IsNotInAlbum { get; set; }
        /// <summary>The isOffline property</summary>
        public bool? IsOffline { get; set; }
        /// <summary>The language property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>The lensModel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LensModel { get; set; }
#nullable restore
#else
        public string LensModel { get; set; }
#endif
        /// <summary>The libraryId property</summary>
        public Guid? LibraryId { get; set; }
        /// <summary>The make property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Make { get; set; }
#nullable restore
#else
        public string Make { get; set; }
#endif
        /// <summary>The model property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model { get; set; }
#nullable restore
#else
        public string Model { get; set; }
#endif
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The personIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? PersonIds { get; set; }
#nullable restore
#else
        public List<Guid?> PersonIds { get; set; }
#endif
        /// <summary>The query property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Query { get; set; }
#nullable restore
#else
        public string Query { get; set; }
#endif
        /// <summary>The queryAssetId property</summary>
        public Guid? QueryAssetId { get; set; }
        /// <summary>The rating property</summary>
        public double? Rating { get; set; }
        /// <summary>The size property</summary>
        public double? Size { get; set; }
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The tagIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? TagIds { get; set; }
#nullable restore
#else
        public List<Guid?> TagIds { get; set; }
#endif
        /// <summary>The takenAfter property</summary>
        public DateTimeOffset? TakenAfter { get; set; }
        /// <summary>The takenBefore property</summary>
        public DateTimeOffset? TakenBefore { get; set; }
        /// <summary>The trashedAfter property</summary>
        public DateTimeOffset? TrashedAfter { get; set; }
        /// <summary>The trashedBefore property</summary>
        public DateTimeOffset? TrashedBefore { get; set; }
        /// <summary>The type property</summary>
        public global::Immich.Client.Models.AssetTypeEnum? Type { get; set; }
        /// <summary>The updatedAfter property</summary>
        public DateTimeOffset? UpdatedAfter { get; set; }
        /// <summary>The updatedBefore property</summary>
        public DateTimeOffset? UpdatedBefore { get; set; }
        /// <summary>The visibility property</summary>
        public global::Immich.Client.Models.AssetVisibility? Visibility { get; set; }
        /// <summary>The withDeleted property</summary>
        public bool? WithDeleted { get; set; }
        /// <summary>The withExif property</summary>
        public bool? WithExif { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.SmartSearchDto"/> and sets the default values.
        /// </summary>
        public SmartSearchDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.SmartSearchDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.SmartSearchDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.SmartSearchDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "albumIds", n => { AlbumIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "createdAfter", n => { CreatedAfter = n.GetDateTimeOffsetValue(); } },
                { "createdBefore", n => { CreatedBefore = n.GetDateTimeOffsetValue(); } },
                { "deviceId", n => { DeviceId = n.GetStringValue(); } },
                { "isEncoded", n => { IsEncoded = n.GetBoolValue(); } },
                { "isFavorite", n => { IsFavorite = n.GetBoolValue(); } },
                { "isMotion", n => { IsMotion = n.GetBoolValue(); } },
                { "isNotInAlbum", n => { IsNotInAlbum = n.GetBoolValue(); } },
                { "isOffline", n => { IsOffline = n.GetBoolValue(); } },
                { "language", n => { Language = n.GetStringValue(); } },
                { "lensModel", n => { LensModel = n.GetStringValue(); } },
                { "libraryId", n => { LibraryId = n.GetGuidValue(); } },
                { "make", n => { Make = n.GetStringValue(); } },
                { "model", n => { Model = n.GetStringValue(); } },
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "personIds", n => { PersonIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "query", n => { Query = n.GetStringValue(); } },
                { "queryAssetId", n => { QueryAssetId = n.GetGuidValue(); } },
                { "rating", n => { Rating = n.GetDoubleValue(); } },
                { "size", n => { Size = n.GetDoubleValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "tagIds", n => { TagIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "takenAfter", n => { TakenAfter = n.GetDateTimeOffsetValue(); } },
                { "takenBefore", n => { TakenBefore = n.GetDateTimeOffsetValue(); } },
                { "trashedAfter", n => { TrashedAfter = n.GetDateTimeOffsetValue(); } },
                { "trashedBefore", n => { TrashedBefore = n.GetDateTimeOffsetValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Immich.Client.Models.AssetTypeEnum>(); } },
                { "updatedAfter", n => { UpdatedAfter = n.GetDateTimeOffsetValue(); } },
                { "updatedBefore", n => { UpdatedBefore = n.GetDateTimeOffsetValue(); } },
                { "visibility", n => { Visibility = n.GetEnumValue<global::Immich.Client.Models.AssetVisibility>(); } },
                { "withDeleted", n => { WithDeleted = n.GetBoolValue(); } },
                { "withExif", n => { WithExif = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<Guid?>("albumIds", AlbumIds);
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("country", Country);
            writer.WriteDateTimeOffsetValue("createdAfter", CreatedAfter);
            writer.WriteDateTimeOffsetValue("createdBefore", CreatedBefore);
            writer.WriteStringValue("deviceId", DeviceId);
            writer.WriteBoolValue("isEncoded", IsEncoded);
            writer.WriteBoolValue("isFavorite", IsFavorite);
            writer.WriteBoolValue("isMotion", IsMotion);
            writer.WriteBoolValue("isNotInAlbum", IsNotInAlbum);
            writer.WriteBoolValue("isOffline", IsOffline);
            writer.WriteStringValue("language", Language);
            writer.WriteStringValue("lensModel", LensModel);
            writer.WriteGuidValue("libraryId", LibraryId);
            writer.WriteStringValue("make", Make);
            writer.WriteStringValue("model", Model);
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("personIds", PersonIds);
            writer.WriteStringValue("query", Query);
            writer.WriteGuidValue("queryAssetId", QueryAssetId);
            writer.WriteDoubleValue("rating", Rating);
            writer.WriteDoubleValue("size", Size);
            writer.WriteStringValue("state", State);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("tagIds", TagIds);
            writer.WriteDateTimeOffsetValue("takenAfter", TakenAfter);
            writer.WriteDateTimeOffsetValue("takenBefore", TakenBefore);
            writer.WriteDateTimeOffsetValue("trashedAfter", TrashedAfter);
            writer.WriteDateTimeOffsetValue("trashedBefore", TrashedBefore);
            writer.WriteEnumValue<global::Immich.Client.Models.AssetTypeEnum>("type", Type);
            writer.WriteDateTimeOffsetValue("updatedAfter", UpdatedAfter);
            writer.WriteDateTimeOffsetValue("updatedBefore", UpdatedBefore);
            writer.WriteEnumValue<global::Immich.Client.Models.AssetVisibility>("visibility", Visibility);
            writer.WriteBoolValue("withDeleted", WithDeleted);
            writer.WriteBoolValue("withExif", WithExif);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ServerConfigDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The externalDomain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalDomain { get; set; }
#nullable restore
#else
        public string ExternalDomain { get; set; }
#endif
        /// <summary>The isInitialized property</summary>
        public bool? IsInitialized { get; set; }
        /// <summary>The isOnboarded property</summary>
        public bool? IsOnboarded { get; set; }
        /// <summary>The loginPageMessage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LoginPageMessage { get; set; }
#nullable restore
#else
        public string LoginPageMessage { get; set; }
#endif
        /// <summary>The mapDarkStyleUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MapDarkStyleUrl { get; set; }
#nullable restore
#else
        public string MapDarkStyleUrl { get; set; }
#endif
        /// <summary>The mapLightStyleUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MapLightStyleUrl { get; set; }
#nullable restore
#else
        public string MapLightStyleUrl { get; set; }
#endif
        /// <summary>The oauthButtonText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OauthButtonText { get; set; }
#nullable restore
#else
        public string OauthButtonText { get; set; }
#endif
        /// <summary>The publicUsers property</summary>
        public bool? PublicUsers { get; set; }
        /// <summary>The trashDays property</summary>
        public int? TrashDays { get; set; }
        /// <summary>The userDeleteDelay property</summary>
        public int? UserDeleteDelay { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.ServerConfigDto"/> and sets the default values.
        /// </summary>
        public ServerConfigDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.ServerConfigDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.ServerConfigDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.ServerConfigDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "externalDomain", n => { ExternalDomain = n.GetStringValue(); } },
                { "isInitialized", n => { IsInitialized = n.GetBoolValue(); } },
                { "isOnboarded", n => { IsOnboarded = n.GetBoolValue(); } },
                { "loginPageMessage", n => { LoginPageMessage = n.GetStringValue(); } },
                { "mapDarkStyleUrl", n => { MapDarkStyleUrl = n.GetStringValue(); } },
                { "mapLightStyleUrl", n => { MapLightStyleUrl = n.GetStringValue(); } },
                { "oauthButtonText", n => { OauthButtonText = n.GetStringValue(); } },
                { "publicUsers", n => { PublicUsers = n.GetBoolValue(); } },
                { "trashDays", n => { TrashDays = n.GetIntValue(); } },
                { "userDeleteDelay", n => { UserDeleteDelay = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("externalDomain", ExternalDomain);
            writer.WriteBoolValue("isInitialized", IsInitialized);
            writer.WriteBoolValue("isOnboarded", IsOnboarded);
            writer.WriteStringValue("loginPageMessage", LoginPageMessage);
            writer.WriteStringValue("mapDarkStyleUrl", MapDarkStyleUrl);
            writer.WriteStringValue("mapLightStyleUrl", MapLightStyleUrl);
            writer.WriteStringValue("oauthButtonText", OauthButtonText);
            writer.WriteBoolValue("publicUsers", PublicUsers);
            writer.WriteIntValue("trashDays", TrashDays);
            writer.WriteIntValue("userDeleteDelay", UserDeleteDelay);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

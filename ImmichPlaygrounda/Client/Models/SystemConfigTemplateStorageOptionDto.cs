// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SystemConfigTemplateStorageOptionDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The dayOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DayOptions { get; set; }
#nullable restore
#else
        public List<string> DayOptions { get; set; }
#endif
        /// <summary>The hourOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? HourOptions { get; set; }
#nullable restore
#else
        public List<string> HourOptions { get; set; }
#endif
        /// <summary>The minuteOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MinuteOptions { get; set; }
#nullable restore
#else
        public List<string> MinuteOptions { get; set; }
#endif
        /// <summary>The monthOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MonthOptions { get; set; }
#nullable restore
#else
        public List<string> MonthOptions { get; set; }
#endif
        /// <summary>The presetOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PresetOptions { get; set; }
#nullable restore
#else
        public List<string> PresetOptions { get; set; }
#endif
        /// <summary>The secondOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SecondOptions { get; set; }
#nullable restore
#else
        public List<string> SecondOptions { get; set; }
#endif
        /// <summary>The weekOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WeekOptions { get; set; }
#nullable restore
#else
        public List<string> WeekOptions { get; set; }
#endif
        /// <summary>The yearOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? YearOptions { get; set; }
#nullable restore
#else
        public List<string> YearOptions { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.SystemConfigTemplateStorageOptionDto"/> and sets the default values.
        /// </summary>
        public SystemConfigTemplateStorageOptionDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.SystemConfigTemplateStorageOptionDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.SystemConfigTemplateStorageOptionDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.SystemConfigTemplateStorageOptionDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dayOptions", n => { DayOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "hourOptions", n => { HourOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "minuteOptions", n => { MinuteOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "monthOptions", n => { MonthOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "presetOptions", n => { PresetOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "secondOptions", n => { SecondOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "weekOptions", n => { WeekOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "yearOptions", n => { YearOptions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("dayOptions", DayOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("hourOptions", HourOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("minuteOptions", MinuteOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("monthOptions", MonthOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("presetOptions", PresetOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("secondOptions", SecondOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("weekOptions", WeekOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("yearOptions", YearOptions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

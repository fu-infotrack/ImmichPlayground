// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AssetFaceCreateDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The assetId property</summary>
        public Guid? AssetId { get; set; }
        /// <summary>The height property</summary>
        public int? Height { get; set; }
        /// <summary>The imageHeight property</summary>
        public int? ImageHeight { get; set; }
        /// <summary>The imageWidth property</summary>
        public int? ImageWidth { get; set; }
        /// <summary>The personId property</summary>
        public Guid? PersonId { get; set; }
        /// <summary>The width property</summary>
        public int? Width { get; set; }
        /// <summary>The x property</summary>
        public int? X { get; set; }
        /// <summary>The y property</summary>
        public int? Y { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.AssetFaceCreateDto"/> and sets the default values.
        /// </summary>
        public AssetFaceCreateDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.AssetFaceCreateDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.AssetFaceCreateDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.AssetFaceCreateDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assetId", n => { AssetId = n.GetGuidValue(); } },
                { "height", n => { Height = n.GetIntValue(); } },
                { "imageHeight", n => { ImageHeight = n.GetIntValue(); } },
                { "imageWidth", n => { ImageWidth = n.GetIntValue(); } },
                { "personId", n => { PersonId = n.GetGuidValue(); } },
                { "width", n => { Width = n.GetIntValue(); } },
                { "x", n => { X = n.GetIntValue(); } },
                { "y", n => { Y = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("assetId", AssetId);
            writer.WriteIntValue("height", Height);
            writer.WriteIntValue("imageHeight", ImageHeight);
            writer.WriteIntValue("imageWidth", ImageWidth);
            writer.WriteGuidValue("personId", PersonId);
            writer.WriteIntValue("width", Width);
            writer.WriteIntValue("x", X);
            writer.WriteIntValue("y", Y);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

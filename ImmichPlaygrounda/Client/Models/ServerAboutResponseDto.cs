// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ServerAboutResponseDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The build property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Build { get; set; }
#nullable restore
#else
        public string Build { get; set; }
#endif
        /// <summary>The buildImage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BuildImage { get; set; }
#nullable restore
#else
        public string BuildImage { get; set; }
#endif
        /// <summary>The buildImageUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BuildImageUrl { get; set; }
#nullable restore
#else
        public string BuildImageUrl { get; set; }
#endif
        /// <summary>The buildUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BuildUrl { get; set; }
#nullable restore
#else
        public string BuildUrl { get; set; }
#endif
        /// <summary>The exiftool property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Exiftool { get; set; }
#nullable restore
#else
        public string Exiftool { get; set; }
#endif
        /// <summary>The ffmpeg property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ffmpeg { get; set; }
#nullable restore
#else
        public string Ffmpeg { get; set; }
#endif
        /// <summary>The imagemagick property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Imagemagick { get; set; }
#nullable restore
#else
        public string Imagemagick { get; set; }
#endif
        /// <summary>The libvips property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Libvips { get; set; }
#nullable restore
#else
        public string Libvips { get; set; }
#endif
        /// <summary>The licensed property</summary>
        public bool? Licensed { get; set; }
        /// <summary>The nodejs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nodejs { get; set; }
#nullable restore
#else
        public string Nodejs { get; set; }
#endif
        /// <summary>The repository property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Repository { get; set; }
#nullable restore
#else
        public string Repository { get; set; }
#endif
        /// <summary>The repositoryUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepositoryUrl { get; set; }
#nullable restore
#else
        public string RepositoryUrl { get; set; }
#endif
        /// <summary>The sourceCommit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceCommit { get; set; }
#nullable restore
#else
        public string SourceCommit { get; set; }
#endif
        /// <summary>The sourceRef property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceRef { get; set; }
#nullable restore
#else
        public string SourceRef { get; set; }
#endif
        /// <summary>The sourceUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceUrl { get; set; }
#nullable restore
#else
        public string SourceUrl { get; set; }
#endif
        /// <summary>The thirdPartyBugFeatureUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThirdPartyBugFeatureUrl { get; set; }
#nullable restore
#else
        public string ThirdPartyBugFeatureUrl { get; set; }
#endif
        /// <summary>The thirdPartyDocumentationUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThirdPartyDocumentationUrl { get; set; }
#nullable restore
#else
        public string ThirdPartyDocumentationUrl { get; set; }
#endif
        /// <summary>The thirdPartySourceUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThirdPartySourceUrl { get; set; }
#nullable restore
#else
        public string ThirdPartySourceUrl { get; set; }
#endif
        /// <summary>The thirdPartySupportUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThirdPartySupportUrl { get; set; }
#nullable restore
#else
        public string ThirdPartySupportUrl { get; set; }
#endif
        /// <summary>The version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>The versionUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VersionUrl { get; set; }
#nullable restore
#else
        public string VersionUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.ServerAboutResponseDto"/> and sets the default values.
        /// </summary>
        public ServerAboutResponseDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.ServerAboutResponseDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.ServerAboutResponseDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.ServerAboutResponseDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "build", n => { Build = n.GetStringValue(); } },
                { "buildImage", n => { BuildImage = n.GetStringValue(); } },
                { "buildImageUrl", n => { BuildImageUrl = n.GetStringValue(); } },
                { "buildUrl", n => { BuildUrl = n.GetStringValue(); } },
                { "exiftool", n => { Exiftool = n.GetStringValue(); } },
                { "ffmpeg", n => { Ffmpeg = n.GetStringValue(); } },
                { "imagemagick", n => { Imagemagick = n.GetStringValue(); } },
                { "libvips", n => { Libvips = n.GetStringValue(); } },
                { "licensed", n => { Licensed = n.GetBoolValue(); } },
                { "nodejs", n => { Nodejs = n.GetStringValue(); } },
                { "repository", n => { Repository = n.GetStringValue(); } },
                { "repositoryUrl", n => { RepositoryUrl = n.GetStringValue(); } },
                { "sourceCommit", n => { SourceCommit = n.GetStringValue(); } },
                { "sourceRef", n => { SourceRef = n.GetStringValue(); } },
                { "sourceUrl", n => { SourceUrl = n.GetStringValue(); } },
                { "thirdPartyBugFeatureUrl", n => { ThirdPartyBugFeatureUrl = n.GetStringValue(); } },
                { "thirdPartyDocumentationUrl", n => { ThirdPartyDocumentationUrl = n.GetStringValue(); } },
                { "thirdPartySourceUrl", n => { ThirdPartySourceUrl = n.GetStringValue(); } },
                { "thirdPartySupportUrl", n => { ThirdPartySupportUrl = n.GetStringValue(); } },
                { "version", n => { Version = n.GetStringValue(); } },
                { "versionUrl", n => { VersionUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("build", Build);
            writer.WriteStringValue("buildImage", BuildImage);
            writer.WriteStringValue("buildImageUrl", BuildImageUrl);
            writer.WriteStringValue("buildUrl", BuildUrl);
            writer.WriteStringValue("exiftool", Exiftool);
            writer.WriteStringValue("ffmpeg", Ffmpeg);
            writer.WriteStringValue("imagemagick", Imagemagick);
            writer.WriteStringValue("libvips", Libvips);
            writer.WriteBoolValue("licensed", Licensed);
            writer.WriteStringValue("nodejs", Nodejs);
            writer.WriteStringValue("repository", Repository);
            writer.WriteStringValue("repositoryUrl", RepositoryUrl);
            writer.WriteStringValue("sourceCommit", SourceCommit);
            writer.WriteStringValue("sourceRef", SourceRef);
            writer.WriteStringValue("sourceUrl", SourceUrl);
            writer.WriteStringValue("thirdPartyBugFeatureUrl", ThirdPartyBugFeatureUrl);
            writer.WriteStringValue("thirdPartyDocumentationUrl", ThirdPartyDocumentationUrl);
            writer.WriteStringValue("thirdPartySourceUrl", ThirdPartySourceUrl);
            writer.WriteStringValue("thirdPartySupportUrl", ThirdPartySupportUrl);
            writer.WriteStringValue("version", Version);
            writer.WriteStringValue("versionUrl", VersionUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

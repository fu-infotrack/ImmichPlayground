// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SharedLinkEditDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowDownload property</summary>
        public bool? AllowDownload { get; set; }
        /// <summary>The allowUpload property</summary>
        public bool? AllowUpload { get; set; }
        /// <summary>Few clients cannot send null to set the expiryTime to never.Setting this flag and not sending expiryAt is considered as null instead.Clients that can send null values can ignore this.</summary>
        public bool? ChangeExpiryTime { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The expiresAt property</summary>
        public DateTimeOffset? ExpiresAt { get; set; }
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The showMetadata property</summary>
        public bool? ShowMetadata { get; set; }
        /// <summary>The slug property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.SharedLinkEditDto"/> and sets the default values.
        /// </summary>
        public SharedLinkEditDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.SharedLinkEditDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.SharedLinkEditDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.SharedLinkEditDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowDownload", n => { AllowDownload = n.GetBoolValue(); } },
                { "allowUpload", n => { AllowUpload = n.GetBoolValue(); } },
                { "changeExpiryTime", n => { ChangeExpiryTime = n.GetBoolValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "expiresAt", n => { ExpiresAt = n.GetDateTimeOffsetValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "showMetadata", n => { ShowMetadata = n.GetBoolValue(); } },
                { "slug", n => { Slug = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allowDownload", AllowDownload);
            writer.WriteBoolValue("allowUpload", AllowUpload);
            writer.WriteBoolValue("changeExpiryTime", ChangeExpiryTime);
            writer.WriteStringValue("description", Description);
            writer.WriteDateTimeOffsetValue("expiresAt", ExpiresAt);
            writer.WriteStringValue("password", Password);
            writer.WriteBoolValue("showMetadata", ShowMetadata);
            writer.WriteStringValue("slug", Slug);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Immich.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ExifResponseDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The city property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>The country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The dateTimeOriginal property</summary>
        public DateTimeOffset? DateTimeOriginal { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The exifImageHeight property</summary>
        public double? ExifImageHeight { get; set; }
        /// <summary>The exifImageWidth property</summary>
        public double? ExifImageWidth { get; set; }
        /// <summary>The exposureTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExposureTime { get; set; }
#nullable restore
#else
        public string ExposureTime { get; set; }
#endif
        /// <summary>The fileSizeInByte property</summary>
        public long? FileSizeInByte { get; set; }
        /// <summary>The fNumber property</summary>
        public double? FNumber { get; set; }
        /// <summary>The focalLength property</summary>
        public double? FocalLength { get; set; }
        /// <summary>The iso property</summary>
        public double? Iso { get; set; }
        /// <summary>The latitude property</summary>
        public double? Latitude { get; set; }
        /// <summary>The lensModel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LensModel { get; set; }
#nullable restore
#else
        public string LensModel { get; set; }
#endif
        /// <summary>The longitude property</summary>
        public double? Longitude { get; set; }
        /// <summary>The make property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Make { get; set; }
#nullable restore
#else
        public string Make { get; set; }
#endif
        /// <summary>The model property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model { get; set; }
#nullable restore
#else
        public string Model { get; set; }
#endif
        /// <summary>The modifyDate property</summary>
        public DateTimeOffset? ModifyDate { get; set; }
        /// <summary>The orientation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Orientation { get; set; }
#nullable restore
#else
        public string Orientation { get; set; }
#endif
        /// <summary>The projectionType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectionType { get; set; }
#nullable restore
#else
        public string ProjectionType { get; set; }
#endif
        /// <summary>The rating property</summary>
        public double? Rating { get; set; }
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The timeZone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Models.ExifResponseDto"/> and sets the default values.
        /// </summary>
        public ExifResponseDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Models.ExifResponseDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Immich.Client.Models.ExifResponseDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Immich.Client.Models.ExifResponseDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "city", n => { City = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "dateTimeOriginal", n => { DateTimeOriginal = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "exifImageHeight", n => { ExifImageHeight = n.GetDoubleValue(); } },
                { "exifImageWidth", n => { ExifImageWidth = n.GetDoubleValue(); } },
                { "exposureTime", n => { ExposureTime = n.GetStringValue(); } },
                { "fNumber", n => { FNumber = n.GetDoubleValue(); } },
                { "fileSizeInByte", n => { FileSizeInByte = n.GetLongValue(); } },
                { "focalLength", n => { FocalLength = n.GetDoubleValue(); } },
                { "iso", n => { Iso = n.GetDoubleValue(); } },
                { "latitude", n => { Latitude = n.GetDoubleValue(); } },
                { "lensModel", n => { LensModel = n.GetStringValue(); } },
                { "longitude", n => { Longitude = n.GetDoubleValue(); } },
                { "make", n => { Make = n.GetStringValue(); } },
                { "model", n => { Model = n.GetStringValue(); } },
                { "modifyDate", n => { ModifyDate = n.GetDateTimeOffsetValue(); } },
                { "orientation", n => { Orientation = n.GetStringValue(); } },
                { "projectionType", n => { ProjectionType = n.GetStringValue(); } },
                { "rating", n => { Rating = n.GetDoubleValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "timeZone", n => { TimeZone = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("country", Country);
            writer.WriteDateTimeOffsetValue("dateTimeOriginal", DateTimeOriginal);
            writer.WriteStringValue("description", Description);
            writer.WriteDoubleValue("exifImageHeight", ExifImageHeight);
            writer.WriteDoubleValue("exifImageWidth", ExifImageWidth);
            writer.WriteStringValue("exposureTime", ExposureTime);
            writer.WriteLongValue("fileSizeInByte", FileSizeInByte);
            writer.WriteDoubleValue("fNumber", FNumber);
            writer.WriteDoubleValue("focalLength", FocalLength);
            writer.WriteDoubleValue("iso", Iso);
            writer.WriteDoubleValue("latitude", Latitude);
            writer.WriteStringValue("lensModel", LensModel);
            writer.WriteDoubleValue("longitude", Longitude);
            writer.WriteStringValue("make", Make);
            writer.WriteStringValue("model", Model);
            writer.WriteDateTimeOffsetValue("modifyDate", ModifyDate);
            writer.WriteStringValue("orientation", Orientation);
            writer.WriteStringValue("projectionType", ProjectionType);
            writer.WriteDoubleValue("rating", Rating);
            writer.WriteStringValue("state", State);
            writer.WriteStringValue("timeZone", TimeZone);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

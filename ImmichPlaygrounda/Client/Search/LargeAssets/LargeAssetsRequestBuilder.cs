// <auto-generated/>
#pragma warning disable CS0618
using Immich.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Immich.Client.Search.LargeAssets
{
    /// <summary>
    /// Builds and executes requests for operations under \search\large-assets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LargeAssetsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Search.LargeAssets.LargeAssetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LargeAssetsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/search/large-assets{?albumIds*,city*,country*,createdAfter*,createdBefore*,deviceId*,isEncoded*,isFavorite*,isMotion*,isNotInAlbum*,isOffline*,lensModel*,libraryId*,make*,minFileSize*,model*,personIds*,rating*,size*,state*,tagIds*,takenAfter*,takenBefore*,trashedAfter*,trashedBefore*,type*,updatedAfter*,updatedBefore*,visibility*,withDeleted*,withExif*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Immich.Client.Search.LargeAssets.LargeAssetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LargeAssetsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/search/large-assets{?albumIds*,city*,country*,createdAfter*,createdBefore*,deviceId*,isEncoded*,isFavorite*,isMotion*,isNotInAlbum*,isOffline*,lensModel*,libraryId*,make*,minFileSize*,model*,personIds*,rating*,size*,state*,tagIds*,takenAfter*,takenBefore*,trashedAfter*,trashedBefore*,type*,updatedAfter*,updatedBefore*,visibility*,withDeleted*,withExif*}", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint requires the `asset.read` permission.
        /// </summary>
        /// <returns>A List&lt;global::Immich.Client.Models.AssetResponseDto&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Immich.Client.Models.AssetResponseDto>?> PostAsync(Action<RequestConfiguration<global::Immich.Client.Search.LargeAssets.LargeAssetsRequestBuilder.LargeAssetsRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Immich.Client.Models.AssetResponseDto>> PostAsync(Action<RequestConfiguration<global::Immich.Client.Search.LargeAssets.LargeAssetsRequestBuilder.LargeAssetsRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Immich.Client.Models.AssetResponseDto>(requestInfo, global::Immich.Client.Models.AssetResponseDto.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// This endpoint requires the `asset.read` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<global::Immich.Client.Search.LargeAssets.LargeAssetsRequestBuilder.LargeAssetsRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<global::Immich.Client.Search.LargeAssets.LargeAssetsRequestBuilder.LargeAssetsRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Immich.Client.Search.LargeAssets.LargeAssetsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Immich.Client.Search.LargeAssets.LargeAssetsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Immich.Client.Search.LargeAssets.LargeAssetsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// This endpoint requires the `asset.read` permission.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LargeAssetsRequestBuilderPostQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("albumIds")]
            public Guid?[]? AlbumIds { get; set; }
#nullable restore
#else
            [QueryParameter("albumIds")]
            public Guid?[] AlbumIds { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("city")]
            public string? City { get; set; }
#nullable restore
#else
            [QueryParameter("city")]
            public string City { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("country")]
            public string? Country { get; set; }
#nullable restore
#else
            [QueryParameter("country")]
            public string Country { get; set; }
#endif
            [QueryParameter("createdAfter")]
            public DateTimeOffset? CreatedAfter { get; set; }
            [QueryParameter("createdBefore")]
            public DateTimeOffset? CreatedBefore { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("deviceId")]
            public string? DeviceId { get; set; }
#nullable restore
#else
            [QueryParameter("deviceId")]
            public string DeviceId { get; set; }
#endif
            [QueryParameter("isEncoded")]
            public bool? IsEncoded { get; set; }
            [QueryParameter("isFavorite")]
            public bool? IsFavorite { get; set; }
            [QueryParameter("isMotion")]
            public bool? IsMotion { get; set; }
            [QueryParameter("isNotInAlbum")]
            public bool? IsNotInAlbum { get; set; }
            [QueryParameter("isOffline")]
            public bool? IsOffline { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("lensModel")]
            public string? LensModel { get; set; }
#nullable restore
#else
            [QueryParameter("lensModel")]
            public string LensModel { get; set; }
#endif
            [QueryParameter("libraryId")]
            public Guid? LibraryId { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("make")]
            public string? Make { get; set; }
#nullable restore
#else
            [QueryParameter("make")]
            public string Make { get; set; }
#endif
            [QueryParameter("minFileSize")]
            public int? MinFileSize { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("model")]
            public string? Model { get; set; }
#nullable restore
#else
            [QueryParameter("model")]
            public string Model { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("personIds")]
            public Guid?[]? PersonIds { get; set; }
#nullable restore
#else
            [QueryParameter("personIds")]
            public Guid?[] PersonIds { get; set; }
#endif
            [QueryParameter("rating")]
            public double? Rating { get; set; }
            [QueryParameter("size")]
            public double? Size { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("state")]
            public string? State { get; set; }
#nullable restore
#else
            [QueryParameter("state")]
            public string State { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tagIds")]
            public Guid?[]? TagIds { get; set; }
#nullable restore
#else
            [QueryParameter("tagIds")]
            public Guid?[] TagIds { get; set; }
#endif
            [QueryParameter("takenAfter")]
            public DateTimeOffset? TakenAfter { get; set; }
            [QueryParameter("takenBefore")]
            public DateTimeOffset? TakenBefore { get; set; }
            [QueryParameter("trashedAfter")]
            public DateTimeOffset? TrashedAfter { get; set; }
            [QueryParameter("trashedBefore")]
            public DateTimeOffset? TrashedBefore { get; set; }
            [Obsolete("This property is deprecated, use TypeAsAssetTypeEnum instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
            [QueryParameter("type")]
            public global::Immich.Client.Models.AssetTypeEnum? TypeAsAssetTypeEnum { get; set; }
            [QueryParameter("updatedAfter")]
            public DateTimeOffset? UpdatedAfter { get; set; }
            [QueryParameter("updatedBefore")]
            public DateTimeOffset? UpdatedBefore { get; set; }
            [Obsolete("This property is deprecated, use VisibilityAsAssetVisibility instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("visibility")]
            public string? Visibility { get; set; }
#nullable restore
#else
            [QueryParameter("visibility")]
            public string Visibility { get; set; }
#endif
            [QueryParameter("visibility")]
            public global::Immich.Client.Models.AssetVisibility? VisibilityAsAssetVisibility { get; set; }
            [QueryParameter("withDeleted")]
            public bool? WithDeleted { get; set; }
            [QueryParameter("withExif")]
            public bool? WithExif { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LargeAssetsRequestBuilderPostRequestConfiguration : RequestConfiguration<global::Immich.Client.Search.LargeAssets.LargeAssetsRequestBuilder.LargeAssetsRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
